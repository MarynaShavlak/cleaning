{"mappings":"oeAAAA,EAAA,S,WCA4BC,SAASC,iBAAiB,wBAElCC,SAAQC,IAC1BA,EAAOC,iBAAiB,SAAS,MAKnC,SAAgCC,GAC9B,MAAMC,EAAiBD,EAAIE,QAAQ,oBACVD,EAAeL,iBAAiB,oBACxCC,SAAQM,KAM3B,SAAgCC,GAC9B,MACMC,EAAsC,SADrBC,OAAOC,iBAAiBH,GACfI,QAChCJ,EAAGK,MAAMD,QAAUH,EAAW,QAAU,M,CARtCK,CAAuBP,EAAa,IAWxC,SAAuBH,GACrB,MAAMW,EAAWX,EAAIY,cAAc,eAC7BC,EAAYb,EAAIY,cAAc,gBACL,SAA3BD,EAASF,MAAMD,SACjBG,EAASF,MAAMD,QAAU,QACzBK,EAAUJ,MAAMD,QAAU,SAE1BG,EAASF,MAAMD,QAAU,OACzBK,EAAUJ,MAAMD,QAAU,Q,CAjB5BM,CAAcd,E,CAVZe,CAAuBjB,EAAO,GAC9B,ICLG,MAAMkB,EAAYrB,SAASiB,cAAc,iBAC1CK,EAAiBtB,SAASC,iBAAiB,iBCejD,SAASsB,EAAYC,GDDd,IAAqBC,ECE1BzB,SAAS0B,KAAKC,UAAUC,OAAO,GAAGJ,EAAKK,mBACvCL,EAAKM,MAAMH,UAAUC,OAAO,oBACV,iBAAdJ,EAAKK,ODJiBJ,ECIoB,MAAAJ,OAAA,EAAAA,EAAWI,SDHzD,IAAIA,GAAUvB,SAAQ6B,IACpBA,EAAQJ,UAAUK,OAAO,QAAQ,I,CAfrCX,WAAWjB,iBAAiB,UAyB5B,SAAsB6B,GACpBA,EAAEC,iBAeF,MAAMC,EA6BC,IAAIb,GAAgBc,MAAK/B,GAAOA,EAAIsB,UAAUU,SAAS,YA5B9DC,QAAQC,IAAI,wBAAyBJ,GAEH,IAA9BK,mBAAmBC,SACrBH,QAAQC,IAAI,eACZN,EAAES,cAAcC,SAChBhC,OAAOiC,SAASC,KAAO,qB,IAI3BvB,EAAepB,SAAQO,IACrBA,EAAGL,iBAAiB,SAAS6B,KAK/B,SAA+BA,GAC7B,MAAMa,EAAgBb,EAAEc,OAAOxC,QAAQ,UACvC,GAAIuC,EAAcnB,UAAUU,SAAS,UAAW,OAChD,IAAIf,GAAgBpB,SAAQC,IACtBA,IAAW2C,EACb3C,EAAOwB,UAAUqB,IAAI,UAErB7C,EAAOwB,UAAUK,OAAO,SAAS,G,CAXnCiB,CAAsBhB,EAAE,GACxB,IEtDJ,MAAMiB,EAAc,CAClBrB,KAAM,UACNsB,aAAcnD,SAASiB,cAAc,6BACrCmC,cAAepD,SAASiB,cAAc,8BACtCa,MAAO9B,SAASiB,cAAc,wBAC9BoC,SAAUrD,SAASiB,cAAc,uBDJ5B,IAAyBO,KCOhB0B,GDNTC,aAAa/C,iBAAiB,SAAS,IAAMmB,EAAYC,KAC9DA,EAAK4B,cAAchD,iBAAiB,SAAS6B,IAC3CA,EAAEqB,kBACF/B,EAAYC,EAAK,IAEnBA,EAAK6B,SAASjD,iBAAiB,SAAS6B,IAClCA,EAAEc,SAAWvB,EAAK6B,UACpB9B,EAAYC,EAAK","sources":["src/js/faq.js","src/js/modules/questions.js","src/js/modules/user-order-form.js","src/js/modules/modal.js","src/js/modules/support-modal.js"],"sourcesContent":["import './modules/common.js';\nimport './modules/aside-menu.js';\nimport './modules/questions.js';\nimport './modules/modal.js';\nimport './modules/support-modal.js';\n","const toggleAnswerBtnList = document.querySelectorAll('.toggle-question-btn');\n\ntoggleAnswerBtnList.forEach(button => {\n  button.addEventListener('click', () => {\n    onToggleAnswerBtnClick(button);\n  });\n});\n\nfunction onToggleAnswerBtnClick(btn) {\n  const parentListItem = btn.closest('.questions__item');\n  const questionTextList = parentListItem.querySelectorAll('.questions__text');\n  questionTextList.forEach(questionText => {\n    toggleAnswerToQuestion(questionText);\n  });\n  toggleBtnIcon(btn);\n}\n\nfunction toggleAnswerToQuestion(el) {\n  const computedStyles = window.getComputedStyle(el);\n  const isHidden = computedStyles.display === 'none';\n  el.style.display = isHidden ? 'block' : 'none';\n}\n\nfunction toggleBtnIcon(btn) {\n  const plusIcon = btn.querySelector('.icon--plus');\n  const minusIcon = btn.querySelector('.icon--minus');\n  if (plusIcon.style.display === 'none') {\n    plusIcon.style.display = 'block';\n    minusIcon.style.display = 'none';\n  } else {\n    plusIcon.style.display = 'none';\n    minusIcon.style.display = 'block';\n  }\n}\n","export const subscForm = document.querySelector('.subscr__form');\nconst paymentBtnList = document.querySelectorAll('.payment__btn');\nsubscForm?.addEventListener('submit', onSubmitForm);\n\nfunction validateFields(elements, fieldNames) {\n  const elementsWithErrors = [];\n  fieldNames.forEach(fieldName => {\n    const fieldValue = elements[fieldName].value;\n    if (fieldValue.length === 0) {\n      elementsWithErrors.push(elements[fieldName]);\n    }\n  });\n  return elementsWithErrors;\n}\n\nexport function resetErrors(elements) {\n  [...elements].forEach(element => {\n    element.classList.remove('error');\n  });\n}\n\nfunction addErrorClass(elementsWithErrors) {\n  elementsWithErrors.forEach(element => {\n    element.classList.add('error');\n  });\n}\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  // const elements = e.currentTarget.elements;\n  // const validationFields = [\n  //   'userName',\n  //   'userSurname',\n  //   'userTel',\n  //   'userEmail',\n  //   'userLocation',\n  //   'userDate',\n  //   'userTime',\n  // ];\n\n  // const elementsWithErrors = validateFields(elements, validationFields);\n  // resetErrors(elements);\n  // addErrorClass(elementsWithErrors);\n  const isPaymentTypeChosen = checkIfPaymentTypeChosen();\n  console.log('isPaymentTypeChosen: ', isPaymentTypeChosen);\n\n  if (elementsWithErrors.length === 0) {\n    console.log('form submit');\n    e.currentTarget.submit();\n    window.location.href = 'success-order.html';\n  }\n}\n\npaymentBtnList.forEach(el => {\n  el.addEventListener('click', e => {\n    onPaymentTypeBtnClick(e);\n  });\n});\n\nfunction onPaymentTypeBtnClick(e) {\n  const clickedButton = e.target.closest('button');\n  if (clickedButton.classList.contains('active')) return;\n  [...paymentBtnList].forEach(button => {\n    if (button === clickedButton) {\n      button.classList.add('active');\n    } else {\n      button.classList.remove('active');\n    }\n  });\n}\n\nfunction checkIfPaymentTypeChosen() {\n  return [...paymentBtnList].some(btn => btn.classList.contains('active'));\n}\n","import { resetErrors } from './user-order-form';\nimport { subscForm } from './user-order-form';\n\nexport function initializeModal(refs) {\n  refs.openModalBtn.addEventListener('click', () => toggleModal(refs));\n  refs.closeModalBtn.addEventListener('click', e => {\n    e.stopPropagation();\n    toggleModal(refs);\n  });\n  refs.backdrop.addEventListener('click', e => {\n    if (e.target === refs.backdrop) {\n      toggleModal(refs);\n    }\n  });\n}\n\nfunction toggleModal(refs) {\n  document.body.classList.toggle(`${refs.name}-modal-open`);\n  refs.modal.classList.toggle('backdrop--hidden');\n  if (refs.name === 'subscription') resetErrors(subscForm?.elements);\n}\n","import { initializeModal } from './modal';\n\nconst refsSupport = {\n  name: 'support',\n  openModalBtn: document.querySelector('[data-support-modal-open]'),\n  closeModalBtn: document.querySelector('[data-support-modal-close]'),\n  modal: document.querySelector('[data-support-modal]'),\n  backdrop: document.querySelector('.backdrop--support'),\n};\n\ninitializeModal(refsSupport);\n"],"names":["parcelRequire","document","querySelectorAll","forEach","button","addEventListener","btn","parentListItem","closest","questionText","el","isHidden","window","getComputedStyle","display","style","$3b4b3605e911b8a5$var$toggleAnswerToQuestion","plusIcon","querySelector","minusIcon","$3b4b3605e911b8a5$var$toggleBtnIcon","$3b4b3605e911b8a5$var$onToggleAnswerBtnClick","$5f6fe576bb8e45fb$export$ac2141f83bb6e17f","$5f6fe576bb8e45fb$var$paymentBtnList","$c549e00ea1028b97$var$toggleModal","refs","elements","body","classList","toggle","name","modal","element","remove","e","preventDefault","isPaymentTypeChosen","some","contains","console","log","elementsWithErrors","length","currentTarget","submit","location","href","clickedButton","target","add","$5f6fe576bb8e45fb$var$onPaymentTypeBtnClick","$dfe427b8479aa1e2$var$refsSupport","openModalBtn","closeModalBtn","backdrop","stopPropagation"],"version":3,"file":"faq.233fd674.js.map"}