{"mappings":"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","sources":["src/js/modules/calendar.js","src/js/modules/dates.js","src/js/modules/time-picker.js","src/js/modules/location.js"],"sourcesContent":["import { toggleIconActiveStyle, appendElement } from './common';\nimport {\n  getCurrentDateAsString,\n  extractDate,\n  isDateBeforeToday,\n  convertDateFormat,\n  reverseConvertDateFormat,\n  calculateStartDay,\n  getLastDayOfPrevMonth,\n  getCurrentYearAndMonth,\n  getMonthBoundaryDates,\n  formatDateInfo,\n} from './dates';\n\nconst calendarBlocks = document.querySelectorAll('.calendar');\ncalendarBlocks.forEach(calendarBlock => {\n  const dateInput =\n    calendarBlock.parentElement.previousElementSibling.querySelector(\n      '[name=\"userDate\"]'\n    );\n  const calendarIcon =\n    calendarBlock.parentElement.previousElementSibling.querySelector(\n      '.icon--calendar'\n    );\n\n  const sheduleEl = calendarBlock.parentElement.querySelector('.work-shedule');\n  console.log('sheduleEl: ', sheduleEl);\n  let selectedDateObj = new Date();\n  let monthToShowInCalendarObj = new Date();\n  let orderDayString = getCurrentDateAsString();\n\n  createCalendar(\n    calendarBlock,\n    dateInput,\n    calendarIcon,\n    sheduleEl,\n    selectedDateObj,\n    monthToShowInCalendarObj,\n    orderDayString\n  );\n});\n\nfunction createCalendar(\n  calendarBlock,\n  dateInput,\n  calendarIcon,\n  sheduleEl,\n  selectedDateObj,\n  monthToShowInCalendarObj,\n  orderDayString\n) {\n  const calendarBody = calendarBlock.querySelector('.calendar__body');\n  const calendarHeadMonthAndYear = calendarBlock.querySelector(\n    '.calendar__monthYear'\n  );\n  const prevMonthBtn = calendarBlock.querySelector('.calendar__prevMonth-btn');\n  const nextMonthBtn = calendarBlock.querySelector('.calendar__nextMonth-btn');\n  dateInput.addEventListener('click', () => {\n    toggleCalendarVisibility();\n    toggleSheduleVisibility();\n    toggleIconActiveStyle(calendarIcon);\n    monthToShowInCalendarObj = new Date(selectedDateObj);\n    const isCalendarVisible = !calendarBlock.classList.contains('isHidden');\n    generateCalendar(selectedDateObj);\n    if (isCalendarVisible) {\n      setDateInputValue();\n    }\n  });\n\n  dateInput.addEventListener('blur', e => {\n    const trimmedValue = extractDate(e.target.value);\n    dateInput.value = trimmedValue;\n  });\n\n  calendarIcon.addEventListener('click', e => {\n    toggleCalendarVisibility();\n    toggleSheduleVisibility();\n    monthToShowInCalendarObj = new Date(selectedDateObj);\n    generateCalendar(selectedDateObj);\n    toggleIconActiveStyle(e.target);\n    const isCalendarVisible = !calendarBlock.classList.contains('isHidden');\n    if (isCalendarVisible) {\n      setDateInputValue();\n    }\n  });\n\n  prevMonthBtn?.addEventListener('click', () => {\n    updateCalendar(-1);\n  });\n\n  nextMonthBtn?.addEventListener('click', () => {\n    updateCalendar(1);\n  });\n\n  function setCellText(cell, day) {\n    cell.textContent = day;\n  }\n  function setCellAttributes(cell, { day, month, year }) {\n    cell.dataset.date = `${day}/${month < 9 ? '0' : ''}${month + 1}/${year}`;\n  }\n\n  function addCellClasses(cell, options) {\n    const { monthType, isCellSelectedDay, isDisabledDate } = options;\n    if (isDisabledDate) {\n      cell.classList.add('disabled-day');\n    }\n\n    if (monthType === 'current-month' && isCellSelectedDay) {\n      cell.classList.add('order-day');\n    }\n\n    cell.classList.add(monthType);\n  }\n\n  function addClickEventIfNotDisabled(cell, isDisabledDate) {\n    if (!isDisabledDate) {\n      cell.addEventListener('click', handleCellClick);\n    }\n  }\n\n  function createCellEl(cellData) {\n    const { day, month, year, isDisabledDate, monthType, isCellSelectedDay } =\n      cellData;\n    const cell = document.createElement('td');\n    const options = { monthType, isCellSelectedDay, isDisabledDate };\n    setCellText(cell, day);\n    setCellAttributes(cell, { day, month, year });\n    addClickEventIfNotDisabled(cell, isDisabledDate);\n    addCellClasses(cell, options);\n    return cell;\n  }\n\n  function createCalendarCell(day, monthType) {\n    const { year, month } = getCurrentYearAndMonth(monthToShowInCalendarObj);\n    const todayObj = new Date();\n    let cellDateObj;\n\n    if (monthType === 'previous-month') {\n      const { formattedDay, formattedMonth, formattedYear } = formatDateInfo(\n        day,\n        month,\n        year\n      );\n      cellDateObj = new Date(formattedYear, formattedMonth - 1, formattedDay);\n    } else if (monthType === 'current-month') {\n      const { formattedDay } = formatDateInfo(day);\n      cellDateObj = new Date(year, month, formattedDay);\n    } else if (monthType === 'next-month') {\n      const { formattedDay } = formatDateInfo(day, month, year);\n      const nextMonth = month === 11 ? 0 : month + 1;\n      const nextYear = month === 11 ? year + 1 : year;\n      cellDateObj = new Date(nextYear, nextMonth, formattedDay);\n    }\n\n    const isDisabledDate = isDateBeforeToday(cellDateObj, todayObj);\n    const isCellSelectedDay = isCellSelected(cellDateObj, selectedDateObj, day);\n    const formattedDay = String(cellDateObj.getDate()).padStart(2, '0');\n\n    const cellData = {\n      day: formattedDay,\n      month: cellDateObj.getMonth(),\n      year: cellDateObj.getFullYear(),\n      isDisabledDate,\n      monthType,\n      isCellSelectedDay,\n    };\n\n    const cell = createCellEl(cellData);\n    return cell;\n  }\n\n  function isCellSelected(cellDateObj, selectedDateObj, day) {\n    const isYearEqual =\n      cellDateObj.getFullYear() === selectedDateObj.getFullYear();\n    const isMonthEqual = cellDateObj.getMonth() === selectedDateObj.getMonth();\n    const isDayEqual = day === selectedDateObj.getDate();\n    const isCellSelectedDay = isYearEqual && isMonthEqual && isDayEqual;\n    return isCellSelectedDay;\n  }\n\n  function setMonthAndYearName(year) {\n    const monthName = monthToShowInCalendarObj.toLocaleDateString('uk-UA', {\n      month: 'long',\n    });\n    const capitalizedMonth =\n      monthName.charAt(0).toUpperCase() + monthName.slice(1);\n    calendarHeadMonthAndYear.textContent = `${capitalizedMonth} ${year}`;\n  }\n\n  function generateCalendar(dateobj) {\n    clearCalendarData();\n    const { year, month } = getCurrentYearAndMonth(dateobj);\n    setMonthAndYearName(year);\n    const { firstDayOfMonth, lastDayOfMonthObj } = getMonthBoundaryDates(\n      year,\n      month\n    );\n    const initialNumberOfWeekDay = calculateStartDay(firstDayOfMonth);\n    const lastDayOfPrevMonth = getLastDayOfPrevMonth(year, month);\n\n    let currentDayNumber = 1;\n    let currentRow = createCalendarRow();\n\n    for (let i = initialNumberOfWeekDay - 1; i >= 1; i--) {\n      const day = lastDayOfPrevMonth - i + 1;\n      const cell = createCalendarCell(day, 'previous-month');\n      appendElement(currentRow, cell);\n    }\n\n    while (currentDayNumber <= lastDayOfMonthObj.getDate()) {\n      const cell = createCalendarCell(currentDayNumber, 'current-month');\n      appendElement(currentRow, cell);\n      const isWeekRowFull = currentRow.children.length === 7;\n      if (isWeekRowFull) {\n        appendElement(calendarBody, currentRow);\n        currentRow = createCalendarRow();\n      }\n      currentDayNumber++;\n    }\n    const isAnyEmptyCell = currentRow.children.length > 0;\n    if (isAnyEmptyCell) {\n      for (let i = 1; currentRow.children.length < 7; i++) {\n        const cell = createCalendarCell(i, 'next-month');\n        appendElement(currentRow, cell);\n      }\n      appendElement(calendarBody, currentRow);\n    }\n  }\n\n  function handleCellClick(event) {\n    const clickedDate = convertDateFormat(event.target.dataset.date);\n    const currentDateObj = new Date().toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n    });\n\n    const clickedDateObj = new Date(clickedDate);\n\n    selectedDateObj = clickedDateObj;\n    const currentDateObjObj = new Date(currentDateObj);\n    const differenceInMilliseconds = clickedDateObj - currentDateObjObj;\n\n    if (differenceInMilliseconds >= 0) {\n      const chosenDate = reverseConvertDateFormat(clickedDate);\n      orderDayString = chosenDate;\n      setDateInputValue();\n      toggleIconActiveStyle(calendarIcon);\n      toggleCalendarVisibility();\n      toggleSheduleVisibility();\n    }\n  }\n\n  function setDateInputValue() {\n    dateInput.value = `${orderDayString}`;\n  }\n\n  function clearCalendarData() {\n    calendarBody.innerHTML = '';\n  }\n\n  function updateCalendar(monthOffset) {\n    monthToShowInCalendarObj.setMonth(\n      monthToShowInCalendarObj.getMonth() + monthOffset\n    );\n\n    generateCalendar(monthToShowInCalendarObj);\n  }\n\n  function toggleCalendarVisibility() {\n    calendarBlock.classList.toggle('isHidden');\n  }\n  function toggleSheduleVisibility() {\n    sheduleEl.classList.toggle('isHidden');\n  }\n\n  function createCalendarRow() {\n    return document.createElement('tr');\n  }\n\n  generateCalendar(selectedDateObj);\n}\n","export function getCurrentDateAsString() {\n  const currentDate = new Date();\n  const day = currentDate.getDate().toString().padStart(2, '0');\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\n  const year = currentDate.getFullYear();\n  return `${day}/${month}/${year}`;\n}\n\nexport function extractDate(inputString) {\n  const trimmedString = inputString.trim();\n  const datePattern = /\\d{2}\\/\\d{2}\\/\\d{4}/;\n  const match = trimmedString.match(datePattern);\n  if (match) {\n    return match[0];\n  } else {\n    return null;\n  }\n}\n\nexport function isDateBeforeToday(date, todayObj) {\n  return date < todayObj;\n}\n\nexport function convertDateFormat(dateString) {\n  const parts = dateString.split('/');\n  const [day, month, year] = parts;\n  const newDateString = `${month}/${day}/${year}`;\n  return newDateString;\n}\n\nexport function reverseConvertDateFormat(dateString) {\n  const parts = dateString.split('/');\n  const [month, day, year] = parts;\n  const newDateString = `${day}/${month}/${year}`;\n  return newDateString;\n}\n\nexport function calculateStartDay(firstDayOfMonth) {\n  let initialNumberOfWeekDay = firstDayOfMonth.getDay();\n  if (initialNumberOfWeekDay === 0) {\n    initialNumberOfWeekDay = 7;\n  }\n  return initialNumberOfWeekDay;\n}\n\nexport function getLastDayOfPrevMonth(year, month) {\n  return new Date(year, month, 0).getDate();\n}\n\nexport function getCurrentYearAndMonth(obj) {\n  const year = obj.getFullYear();\n  const month = obj.getMonth();\n  return { month, year };\n}\n\nexport function getMonthBoundaryDates(year, month) {\n  const firstDayOfMonth = new Date(year, month, 1);\n  const lastDayOfMonthObj = new Date(year, month + 1, 0);\n  return { firstDayOfMonth, lastDayOfMonthObj };\n}\n\nexport function formatDateInfo(day, month, year) {\n  const formattedDay = day < 10 ? `0${day}` : day;\n  const formattedMonth = month === 0 ? 12 : month;\n  const formattedYear = month === 0 ? year - 1 : year;\n\n  return {\n    formattedDay,\n    formattedMonth,\n    formattedYear,\n  };\n}\n","import { toggleIconActiveStyle } from './common';\nconst timePickerElements = document.querySelectorAll('.time-picker-wrap');\ntimePickerElements.forEach(element => {\n  initializeTimePicker(element);\n});\n\nfunction initializeTimePicker(timePickerElement) {\n  const clockIcon =\n    timePickerElement.previousElementSibling.querySelector('.icon--clock');\n  const hourTablo = timePickerElement.querySelector('.tablo--hours');\n  const minuteTablo = timePickerElement.querySelector('.tablo--minutes');\n  const hourPicker = timePickerElement.querySelector('.time-picker__hours');\n  const minutePicker = timePickerElement.querySelector('.time-picker__minutes');\n  const timePickerBtn = timePickerElement.querySelector('.time-picker__btn');\n  const timeInput =\n    timePickerElement.previousElementSibling.querySelector('[name=\"userTime\"]');\n  const selectedTimeObj = { hours: '20', minutes: '00' };\n\n  timeInput.addEventListener('click', () => {\n    toggleIconActiveStyle(clockIcon);\n    toggleTimePickerVisibility();\n    const isTimePickerVisible =\n      !timePickerElement.classList.contains('isHidden');\n    if (isTimePickerVisible) {\n      setTimeInputValue();\n    }\n  });\n\n  timeInput.addEventListener('blur', e => {\n    const trimmedValue = extractTime(e.target.value);\n    timeInput.value = trimmedValue;\n  });\n\n  clockIcon.addEventListener('click', e => {\n    toggleTimePickerVisibility();\n    toggleIconActiveStyle(e.target);\n  });\n\n  hourTablo.addEventListener('click', e =>\n    onTimeCellClick(e, '.time-picker__hours')\n  );\n\n  minuteTablo.addEventListener('click', e =>\n    onTimeCellClick(e, '.time-picker__minutes')\n  );\n\n  minutePicker.addEventListener('click', () =>\n    toggleTablo(minuteTablo, hourTablo)\n  );\n\n  hourPicker.addEventListener('click', () =>\n    toggleTablo(hourTablo, minuteTablo)\n  );\n\n  timePickerBtn.addEventListener('click', () => {\n    toggleTimePickerVisibility();\n    toggleIconActiveStyle(clockIcon);\n  });\n  function setTimeInputValue() {\n    timeInput.value = `${selectedTimeObj.hours} : ${selectedTimeObj.minutes}`;\n  }\n  function onTimeCellClick(e, blockSelector) {\n    const clickedElement = e.target;\n    if (!validateClickedNumber(clickedElement)) return;\n    const partTimeName = getTimePartName(blockSelector);\n    const elements = timePickerElement.querySelectorAll(`.${partTimeName}`);\n    updateTimePickerTablo(clickedElement, elements);\n    const block = timePickerElement.querySelector(blockSelector);\n    const value = clickedElement.dataset.id;\n    updateTimePickerBlock(block, value);\n    updateTimeInput(blockSelector, value);\n  }\n\n  function validateClickedNumber(clickedElement) {\n    return (\n      clickedElement.classList.contains('number') &&\n      !clickedElement.classList.contains('active')\n    );\n  }\n\n  function updateTimePickerTablo(clickedElement, elements) {\n    [...elements].map(element =>\n      element === clickedElement\n        ? selectElement(element)\n        : deselectElement(element)\n    );\n  }\n\n  function updateTimePickerBlock(block, value) {\n    block.innerHTML = value;\n  }\n  function toggleTablo(tabloToShow, tabloToHide) {\n    const isVisible = !tabloToShow.classList.contains('isHidden');\n    if (isVisible) return;\n    tabloToShow.classList.remove('isHidden');\n    tabloToHide.classList.add('isHidden');\n  }\n  function toggleTimePickerVisibility() {\n    timePickerElement.classList.toggle('isHidden');\n  }\n  function updateTimeInput(selector, value) {\n    const partTime = getTimePartName(selector);\n    selectedTimeObj[partTime] = value;\n    setTimeInputValue();\n  }\n  function selectElement(element) {\n    element.classList.add('active');\n  }\n\n  function deselectElement(element) {\n    element.classList.remove('active');\n  }\n\n  function getTimePartName(selector) {\n    return selector.split('__')[1];\n  }\n\n  function extractTime(inputString) {\n    const trimmedString = inputString.trim();\n    const timeMatch = trimmedString.match(/\\d{2}\\s*:\\s*\\d{2}/);\n    return timeMatch ? timeMatch[0] : null;\n  }\n}\n","const backdrop = document.querySelector('.backdrop--subscr');\n\nconst locationInputList = document.querySelectorAll('.form__input--location');\n\nif (!window.initMap) {\n  window.initMap = function () {\n    locationInputList.forEach(function (locationInput) {\n      const autocomplete = new google.maps.places.Autocomplete(locationInput);\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        locationInput.setAttribute('data-id', locationInput.value);\n      });\n    });\n  };\n}\n\nfunction handleInputFocusAndNotEmpty(event) {\n  const locationInput = event.target;\n  if (backdrop) {\n    if (\n      locationInput.value.trim() !== '' &&\n      document.activeElement === locationInput\n    ) {\n      backdrop.style.overflow = 'hidden';\n    } else {\n      backdrop.style.overflow = 'auto';\n    }\n  }\n}\n\nlocationInputList.forEach(function (locationInput) {\n  locationInput.addEventListener('input', handleInputFocusAndNotEmpty);\n  locationInput.addEventListener('focus', handleInputFocusAndNotEmpty);\n  locationInput.addEventListener('blur', handleInputFocusAndNotEmpty);\n\n  handleInputFocusAndNotEmpty({ target: locationInput });\n});\n"],"names":["$cKJBV","parcelRequire","document","querySelectorAll","forEach","calendarBlock","dateInput","parentElement","previousElementSibling","querySelector","calendarIcon","sheduleEl","console","log","selectedDateObj1","monthToShowInCalendarObj","orderDayString","calendarBody","calendarHeadMonthAndYear","prevMonthBtn","nextMonthBtn","setCellText","cell","day","textContent","setCellAttributes","month","year","dataset","date","addCellClasses","options","monthType","isCellSelectedDay","isDisabledDate","classList","add","addClickEventIfNotDisabled","addEventListener","handleCellClick","createCellEl","cellData","createElement","createCalendarCell","$gP56P","getCurrentYearAndMonth","todayObj","Date","cellDateObj","formattedDay","formattedMonth","formattedYear","formatDateInfo","isDateBeforeToday","isCellSelected","String","getDate","padStart","getMonth","getFullYear","selectedDateObj","isYearEqual","isMonthEqual","isDayEqual","setMonthAndYearName","monthName","toLocaleDateString","capitalizedMonth","charAt","toUpperCase","slice","generateCalendar","dateobj","clearCalendarData","firstDayOfMonth","lastDayOfMonthObj","getMonthBoundaryDates","initialNumberOfWeekDay","calculateStartDay","lastDayOfPrevMonth","getLastDayOfPrevMonth","currentDayNumber","currentRow","createCalendarRow","i","appendElement","children","length","event","clickedDate","convertDateFormat","target","currentDateObj","clickedDateObj","chosenDate","reverseConvertDateFormat","setDateInputValue","toggleIconActiveStyle","toggleCalendarVisibility","toggleSheduleVisibility","value","innerHTML","updateCalendar","monthOffset","setMonth","toggle","isCalendarVisible","contains","e","trimmedValue","extractDate","$cc3f9602dc71fc91$var$createCalendar","getCurrentDateAsString","$c3f55f585b52852b$export$90c332d38f0433b1","currentDate","toString","$c3f55f585b52852b$export$22fa983d82ded8f8","inputString","match","trim","$c3f55f585b52852b$export$e797271039bd7c51","$c3f55f585b52852b$export$b7ffb0954a6650fe","dateString","parts","split","$c3f55f585b52852b$export$b69dcb7b429eae81","$c3f55f585b52852b$export$85183788230cd25b","getDay","$c3f55f585b52852b$export$4131c36df799e960","$c3f55f585b52852b$export$e722cbad0f685804","obj","$c3f55f585b52852b$export$830fcb1fdc42503","$c3f55f585b52852b$export$c3b67661558b2e73","element","timePickerElement","clockIcon","hourTablo","minuteTablo","hourPicker","minutePicker","timePickerBtn","timeInput","selectedTimeObj","hours","minutes","setTimeInputValue","onTimeCellClick","blockSelector","clickedElement","validateClickedNumber","partTimeName","getTimePartName","updateTimePickerTablo","block","id","updateTimePickerBlock","updateTimeInput","elements","map","selectElement","deselectElement","toggleTablo","tabloToShow","tabloToHide","remove","toggleTimePickerVisibility","selector","partTime","extractTime","timeMatch","$04c848f3f4a97aca$var$initializeTimePicker","$ae410647f7bccdd5$var$backdrop","$ae410647f7bccdd5$var$locationInputList","$ae410647f7bccdd5$var$handleInputFocusAndNotEmpty","locationInput","activeElement","style","overflow","window","initMap","autocomplete","google","maps","places","Autocomplete","addListener","getPlace","setAttribute"],"version":3,"file":"calc-order.998089ad.js.map"}