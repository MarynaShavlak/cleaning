{"mappings":"AAAA,SAAAA,kBAAAC,EAAAC,I,m8BAAA,IAAMC,aAAe,CACnB,IACA,cACA,eACA,sBACA,qBACA,mBACA,iBACA,iBACA,aAkCF,SAASC,mBAAmBC,GAEzBC,mBADuBC,SAASC,iBAAiB,kBAC7BC,SAAQ,SAAAC,G,OAASA,EAAKL,KAAOA,C,IAGpD,SAASM,kBAAkBC,GACXL,SAASC,iBAAiBI,GAClCH,SAAQ,SAAAI,G,OAAQA,EAAKC,UAAUC,IAAI,W,IAG3C,SAASC,mBAAmBJ,GACZL,SAASC,iBAAiBI,GAClCH,SAAQ,SAAAI,G,OAAQA,EAAKC,UAAUC,IAAI,e,IAG3C,SAASE,kBAAkBL,GACzB,IAAMM,EAAiBX,SAASY,cAAcP,GAC1CM,GACFA,EAAeJ,UAAUC,IAAI,qB,CAIjC,SAASK,oBACmBb,SAASY,cAAc,eAC/BL,UAAUO,OAAO,kBACdd,SAASY,cAAc,6BAC/BL,UAAUC,IAAI,mB,CAG7B,SAASO,oBACMf,SAASY,cAAc,QAC/BL,UAAUC,IAAI,2B,CA9DrBR,SAASgB,iBAAiB,oBAAoB,WAC5CC,QAAQC,IAAI,YACZ,IAAMC,EAAcC,OAAOC,SAASC,SACd1B,aAAa2B,SAASJ,IACN,gBAAhBA,GACfvB,aAAa2B,SAAS,iBACzBH,OAAOC,SAASvB,KAAO,eAIP,MAAhBqB,GAAuC,gBAAhBA,GACzBT,kBAAkB,cAClBb,mBAAmB,oCACM,iBAAhBsB,GACTT,kBAAkB,iDAClBb,mBAAmB,kCACM,uBAAhBsB,EACTf,kBAAkB,2CACO,qBAAhBe,EACTV,mBAAmB,UACM,mBAAhBU,GACTN,oBACAE,qBAEgB,wBAAhBI,GACgB,gBAAhBA,GAEAJ,mB","sources":["src/index.js"],"sourcesContent":["const allowedPages = [\n  '/',\n  '/index.html',\n  '/office.html',\n  '/success-order.html',\n  '/after-repair.html',\n  '/calc-order.html',\n  '/services.html',\n  '/contacts.html',\n  '/faq.html',\n];\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('download');\n  const currentPage = window.location.pathname;\n  const isAllowedPage = allowedPages.includes(currentPage);\n  if (!isAllowedPage && currentPage !== '/error.html') {\n    if (!allowedPages.includes('/error.html')) {\n      window.location.href = '/error.html';\n    }\n  }\n\n  if (currentPage === '/' || currentPage === '/index.html') {\n    setCurrentNavLink('.nav__link');\n    updateDynamicLinks('index.html#order-cleaning-block');\n  } else if (currentPage === '/office.html') {\n    setCurrentNavLink('.nav__list .nav__item:nth-child(2) .nav__link');\n    updateDynamicLinks('office.html#office-calc-block');\n  } else if (currentPage === '/after-repair.html') {\n    hideSelectedItems('.add-services-list__item:nth-child(n+3)');\n  } else if (currentPage === '/calc-order.html') {\n    addWhiteBackground('.block');\n  } else if (currentPage === '/contacts.html') {\n    modifyContactPage();\n    modifyMainSection();\n  } else if (\n    currentPage === '/success-order.html' ||\n    currentPage === '/error.html'\n  ) {\n    modifyMainSection();\n  }\n});\n\nfunction updateDynamicLinks(href) {\n  const dynamicLinkList = document.querySelectorAll('.dynamic-link');\n  [...dynamicLinkList].forEach(link => (link.href = href));\n}\n\nfunction hideSelectedItems(selector) {\n  const items = document.querySelectorAll(selector);\n  items.forEach(item => item.classList.add('isHidden'));\n}\n\nfunction addWhiteBackground(selector) {\n  const items = document.querySelectorAll(selector);\n  items.forEach(item => item.classList.add('block--white'));\n}\n\nfunction setCurrentNavLink(selector) {\n  const currentNavLink = document.querySelector(selector);\n  if (currentNavLink) {\n    currentNavLink.classList.add('nav__link--current');\n  }\n}\n\nfunction modifyContactPage() {\n  const connectionSection = document.querySelector('.connection');\n  connectionSection.classList.remove('no-padding-top');\n  const supportBlock = document.querySelector('.connection--second-block');\n  supportBlock.classList.add('block-with-image');\n}\n\nfunction modifyMainSection() {\n  const main = document.querySelector('main');\n  main.classList.add('section--dark-background');\n}\n\n// (() => {\n//   const asideMenu = document.querySelector('.aside-menu');\n//   const openMenuBtn = document.querySelector('.open-menu-btn');\n//   const closeMenuBtn = document.querySelector('.close-menu-btn');\n\n//   const toggleMenu = () => {\n//     const isMenuOpen =\n//       openMenuBtn.getAttribute('aria-expanded') === 'true' || false;\n//     openMenuBtn.setAttribute('aria-expanded', !isMenuOpen);\n//     asideMenu.classList.toggle('is-open');\n\n//     const scrollLockMethod = !isMenuOpen\n//       ? 'disableBodyScroll'\n//       : 'enableBodyScroll';\n//     bodyScrollLock[scrollLockMethod](document.body);\n//   };\n\n//   openMenuBtn.addEventListener('click', toggleMenu);\n//   closeMenuBtn.addEventListener('click', toggleMenu);\n\n//   window.matchMedia('(min-width: 768px)').addEventListener('change', e => {\n//     if (!e.matches) return;\n//     asideMenu.classList.remove('is-open');\n//     openMenuBtn.setAttribute('aria-expanded', false);\n//     bodyScrollLock.enableBodyScroll(document.body);\n//   });\n// })();\n\n// const subscForm = document.querySelector('.subscr__form');\n// subscForm?.addEventListener('submit', onSubmitForm);\n// function onSubmitForm(e) {\n//   e.preventDefault();\n//   const elements = e.currentTarget.elements;\n//   const validationFields = [\n//     'userName',\n//     'userSurname',\n//     'userTel',\n//     'userEmail',\n//     'userLocation',\n//     'userDate',\n//     'userTime',\n//   ];\n\n//   const elementsWithErrors = validateFields(elements, validationFields);\n//   resetErrors(elements);\n//   addErrorClass(elementsWithErrors);\n\n//   if (elementsWithErrors.length === 0) {\n//     e.currentTarget.submit();\n//     window.location.href = 'success-order.html';\n//   }\n// }\n\n// function validateFields(elements, fieldNames) {\n//   const elementsWithErrors = [];\n//   fieldNames.forEach(fieldName => {\n//     const fieldValue = elements[fieldName].value;\n//     if (fieldValue.length === 0) {\n//       elementsWithErrors.push(elements[fieldName]);\n//     }\n//   });\n//   return elementsWithErrors;\n// }\n\n// function resetErrors(elements) {\n//   Array.from(elements).forEach(element => {\n//     element.classList.remove('error');\n//   });\n// }\n\n// function addErrorClass(elementsWithErrors) {\n//   elementsWithErrors.forEach(element => {\n//     element.classList.add('error');\n//   });\n// }\n\n// const refsSubscr = {\n//   name: 'subscription',\n//   openModalBtn: document.querySelector('[data-subscription-modal-open]'),\n//   closeModalBtn: document.querySelector('[data-subscription-modal-close]'),\n//   modal: document.querySelector('[data-subscription-modal]'),\n//   backdrop: document.querySelector('.backdrop--subscr'),\n// };\n\n// initializeModal(refsSubscr);\n\n// function initializeModal(refs) {\n//   refs.openModalBtn?.addEventListener('click', () => toggleModal(refs));\n//   refs.closeModalBtn?.addEventListener('click', e => {\n//     e.stopPropagation();\n//     toggleModal(refs);\n//   });\n//   refs.backdrop?.addEventListener('click', e => {\n//     if (e.target === refs.backdrop) {\n//       toggleModal(refs);\n//     }\n//   });\n// }\n\n// function toggleModal(refs) {\n//   document.body.classList.toggle(`${refs.name}-modal-open`);\n//   refs.modal.classList.toggle('backdrop--hidden');\n//   if (refs.name === 'subscription') resetErrors(subscForm.elements);\n// }\n\n// const refsSupport = {\n//   name: 'support',\n//   openModalBtn: document.querySelector('[data-support-modal-open]'),\n//   closeModalBtn: document.querySelector('[data-support-modal-close]'),\n//   modal: document.querySelector('[data-support-modal]'),\n//   backdrop: document.querySelector('.backdrop--support'),\n// };\n\n// initializeModal(refsSupport);\n\n// const selectedTimeObj = { hours: '20', minutes: '00' };\n// const clockIcon = document.querySelector('.icon--clock');\n// const hourTablo = document.querySelector('.tablo--hours');\n// const minuteTablo = document.querySelector('.tablo--minutes');\n// const hourPicker = document.querySelector('.time-picker__hours');\n// const minutePicker = document.querySelector('.time-picker__minutes');\n// const timePickerBtn = document.querySelector('.time-picker__btn');\n// const timeInput = document.querySelector('[name=\"userTime\"]');\n// timeInput.addEventListener('focus', toggleTimePickerVisibility);\n\n// hourTablo.addEventListener('click', e =>\n//   onTimeCellClick(e, '.time-picker__hours')\n// );\n// minuteTablo.addEventListener('click', e =>\n//   onTimeCellClick(e, '.time-picker__minutes')\n// );\n// minutePicker.addEventListener('click', () =>\n//   toggleTablo(minuteTablo, hourTablo)\n// );\n// hourPicker.addEventListener('click', () => toggleTablo(hourTablo, minuteTablo));\n\n// function onTimeCellClick(e, blockSelector) {\n//   const clickedElement = e.target;\n//   if (!validateClickedNumber(clickedElement)) return;\n//   const partTimeName = getTimePartName(blockSelector);\n//   const elements = document.querySelectorAll(`.${partTimeName}`);\n//   updateTimePickerTablo(clickedElement, elements);\n//   const block = document.querySelector(blockSelector);\n//   const value = clickedElement.dataset.id;\n//   updateTimePickerBlock(block, value);\n//   updateTimeInput(blockSelector, value);\n// }\n\n// function validateClickedNumber(clickedElement) {\n//   return (\n//     clickedElement.classList.contains('number') &&\n//     !clickedElement.classList.contains('active')\n//   );\n// }\n\n// function updateTimePickerTablo(clickedElement, elements) {\n//   [...elements].map(element =>\n//     element === clickedElement\n//       ? selectElement(element)\n//       : deselectElement(element)\n//   );\n// }\n\n// function selectElement(element) {\n//   element.classList.add('active');\n// }\n\n// function deselectElement(element) {\n//   element.classList.remove('active');\n// }\n\n// function updateTimePickerBlock(block, value) {\n//   block.innerHTML = value;\n// }\n\n// function toggleTablo(tabloToShow, tabloToHide) {\n//   const isVisible = !tabloToShow.classList.contains('isHidden');\n//   if (isVisible) return;\n//   tabloToShow.classList.remove('isHidden');\n//   tabloToHide.classList.add('isHidden');\n// }\n\n// clockIcon.addEventListener('click', e => {\n//   toggleTimePickerVisibility();\n//   toggleIconActiveStyle(e.target);\n// });\n\n// timePickerBtn.addEventListener('click', () => {\n//   toggleTimePickerVisibility();\n// });\n\n// function toggleTimePickerVisibility() {\n//   const timePickerElement = document.querySelector('.time-picker-wrap');\n//   timePickerElement.classList.toggle('isHidden');\n// }\n\n// function updateTimeInput(selector, value) {\n//   const partTime = getTimePartName(selector);\n//   selectedTimeObj[partTime] = value;\n//   timeInput.value = `${selectedTimeObj.hours} : ${selectedTimeObj.minutes}`;\n// }\n\n// function getTimePartName(selector) {\n//   return selector.split('__')[1];\n// }\n\n// const toggleAnswerBtnList = document.querySelectorAll('.toggle-question-btn');\n\n// toggleAnswerBtnList.forEach(button => {\n//   button.addEventListener('click', () => {\n//     onToggleAnswerBtnClick(button);\n//   });\n// });\n\n// function onToggleAnswerBtnClick(btn) {\n//   const parentListItem = btn.closest('.questions__item');\n//   const questionTextList = parentListItem.querySelectorAll('.questions__text');\n//   questionTextList.forEach(questionText => {\n//     toggleAnswerToQuestion(questionText);\n//   });\n//   toggleBtnIcon(btn);\n// }\n\n// function toggleAnswerToQuestion(el) {\n//   const computedStyles = window.getComputedStyle(el);\n//   const isHidden = computedStyles.display === 'none';\n//   el.style.display = isHidden ? 'block' : 'none';\n// }\n\n// function toggleBtnIcon(btn) {\n//   const plusIcon = btn.querySelector('.icon--plus');\n//   const minusIcon = btn.querySelector('.icon--minus');\n//   if (plusIcon.style.display === 'none') {\n//     plusIcon.style.display = 'block';\n//     minusIcon.style.display = 'none';\n//   } else {\n//     plusIcon.style.display = 'none';\n//     minusIcon.style.display = 'block';\n//   }\n// }\n\n// const calendarIcon = document.querySelector('.icon--calendar');\n// const calendarBody = document.querySelector('.calendar__body');\n// const calendarHeadMonthAndYear = document.querySelector('.calendar__monthYear');\n// const prevMonthBtn = document.querySelector('.calendar__prevMonth-btn');\n// const nextMonthBtn = document.querySelector('.calendar__nextMonth-btn');\n// const dateInput = document.querySelector('[name=\"userDate\"]');\n// dateInput.addEventListener('focus', toggleCalendarVisibility);\n\n// let currentDateObj = new Date();\n\n// function toggleIconActiveStyle(icon) {\n//   icon.classList.toggle('isActive');\n// }\n\n// function calculateStartDay(firstDayOfMonth) {\n//   let initialNumberOfWeekDay = firstDayOfMonth.getDay();\n//   if (initialNumberOfWeekDay === 0) {\n//     initialNumberOfWeekDay = 7;\n//   }\n//   return initialNumberOfWeekDay;\n// }\n\n// function getLastDayOfPrevMonth(year, month) {\n//   return new Date(year, month, 0).getDate();\n// }\n\n// function getCurrentYearAndMonth(currentDateObj) {\n//   const year = currentDateObj.getFullYear();\n//   const month = currentDateObj.getMonth();\n//   return { month, year };\n// }\n\n// function getMonthBoundaryDates(year, month) {\n//   const firstDayOfMonth = new Date(year, month, 1);\n//   const lastDayOfMonthObj = new Date(year, month + 1, 0);\n//   return { firstDayOfMonth, lastDayOfMonthObj };\n// }\n\n// function formatDateInfo(day, month, year) {\n//   const formattedDay = day < 10 ? `0${day}` : day;\n//   const formattedMonth = month === 0 ? 12 : month;\n//   const formattedYear = month === 0 ? year - 1 : year;\n\n//   return {\n//     formattedDay,\n//     formattedMonth,\n//     formattedYear,\n//   };\n// }\n\n// function setCellText(cell, day) {\n//   cell.textContent = day;\n// }\n// function setCellAttributes(cell, day, month, year) {\n//   cell.dataset.date = `${day}/${month < 9 ? '0' : ''}${month + 1}/${year}`;\n// }\n\n// function addCellClasses(cell, isDisabledDate, monthType, isToday) {\n//   cell.classList.add(monthType);\n//   if (isDisabledDate) {\n//     cell.classList.add('disabled-day');\n//   }\n//   if (monthType === 'current-month' && isToday) {\n//     cell.classList.add('current-day');\n//   }\n// }\n\n// function addCellClickEvent(cell, isDisabledDate) {\n//   if (!isDisabledDate) {\n//     cell.addEventListener('click', handleCellClick);\n//   }\n// }\n\n// function createCellEl(fd, fm, y, isDisabledDate, monthType) {\n//   const cell = document.createElement('td');\n//   setCellText(cell, fd);\n//   setCellAttributes(cell, fd, fm, y);\n//   addCellClasses(cell, isDisabledDate, monthType);\n//   addCellClickEvent(cell, isDisabledDate);\n\n//   return cell;\n// }\n\n// function createPreviousMonthCell(day) {\n//   const { year, month } = getCurrentYearAndMonth(currentDateObj);\n//   const { formattedDay, formattedMonth, formattedYear } = formatDateInfo(\n//     day,\n//     month,\n//     year\n//   );\n//   const todayObj = new Date();\n//   const isDisabledDate = isDateBeforeToday(\n//     new Date(formattedYear, formattedMonth - 1, day),\n//     todayObj\n//   );\n//   const cell = createCellEl(\n//     formattedDay,\n//     formattedMonth - 1,\n//     formattedYear,\n//     isDisabledDate,\n//     'previous-month'\n//   );\n//   return cell;\n// }\n\n// function createCurrentMonthCell(day) {\n//   const { formattedDay } = formatDateInfo(day);\n//   const { year, month } = getCurrentYearAndMonth(currentDateObj);\n//   const todayObj = new Date();\n//   const isDisabledDate = isDateBeforeToday(\n//     new Date(year, month, day),\n//     todayObj\n//   );\n\n//   const cell = createCellEl(\n//     formattedDay,\n//     month,\n//     year,\n//     isDisabledDate,\n//     'current-month'\n//   );\n//   const isToday =\n//     currentDateObj.getFullYear() === todayObj.getFullYear() &&\n//     currentDateObj.getMonth() === todayObj.getMonth() &&\n//     day === todayObj.getDate();\n//   addCellClasses(cell, isDisabledDate, 'current-month', isToday);\n//   return cell;\n// }\n\n// function createNextMonthCell(day) {\n//   const { year, month } = getCurrentYearAndMonth(currentDateObj);\n//   const { formattedDay } = formatDateInfo(day, month, year);\n//   const formattedMonth = month === 11 ? 1 : month + 2;\n//   const formattedYear = month === 11 ? year + 1 : year;\n//   const todayObj = new Date();\n//   const isDisabledDate = isDateBeforeToday(\n//     new Date(formattedYear, formattedMonth - 1, day),\n//     todayObj\n//   );\n//   const cell = createCellEl(\n//     formattedDay,\n//     formattedMonth - 1,\n//     formattedYear,\n//     isDisabledDate,\n//     'next-month'\n//   );\n//   return cell;\n// }\n\n// function setMonthAndYearName(year) {\n//   const monthName = currentDateObj.toLocaleDateString('uk-UA', {\n//     month: 'long',\n//   });\n//   const capitalizedMonth =\n//     monthName.charAt(0).toUpperCase() + monthName.slice(1);\n//   calendarHeadMonthAndYear.textContent = `${capitalizedMonth} ${year}`;\n// }\n// function createCalendarRow() {\n//   return document.createElement('tr');\n// }\n\n// function appendElement(parent, child) {\n//   parent.appendChild(child);\n// }\n\n// function generateCalendar() {\n//   const { year, month } = getCurrentYearAndMonth(currentDateObj);\n//   setMonthAndYearName(year);\n//   clearCalendarData();\n//   const { firstDayOfMonth, lastDayOfMonthObj } = getMonthBoundaryDates(\n//     year,\n//     month\n//   );\n//   const initialNumberOfWeekDay = calculateStartDay(firstDayOfMonth);\n//   const lastDayOfPrevMonth = getLastDayOfPrevMonth(year, month);\n\n//   let currentDayNumber = 1;\n//   let currentRow = createCalendarRow();\n\n//   for (let i = initialNumberOfWeekDay - 1; i >= 1; i--) {\n//     const day = lastDayOfPrevMonth - i + 1;\n//     const cell = createPreviousMonthCell(day);\n//     appendElement(currentRow, cell);\n//   }\n\n//   while (currentDayNumber <= lastDayOfMonthObj.getDate()) {\n//     const cell = createCurrentMonthCell(currentDayNumber);\n//     appendElement(currentRow, cell);\n//     const isWeekRowFull = currentRow.children.length === 7;\n//     if (isWeekRowFull) {\n//       appendElement(calendarBody, currentRow);\n//       currentRow = createCalendarRow();\n//     }\n//     currentDayNumber++;\n//   }\n//   const isAnyEmptyCell = currentRow.children.length > 0;\n//   if (isAnyEmptyCell) {\n//     for (let i = 1; currentRow.children.length < 7; i++) {\n//       const cell = createNextMonthCell(i);\n//       appendElement(currentRow, cell);\n//     }\n//     appendElement(calendarBody, currentRow);\n//   }\n// }\n\n// function isDateBeforeToday(date, todayObj) {\n//   return date < todayObj;\n// }\n\n// function convertDateFormat(dateString) {\n//   const parts = dateString.split('/');\n//   const [day, month, year] = parts;\n//   const newDateString = `${month}/${day}/${year}`;\n//   return newDateString;\n// }\n\n// function reverseConvertDateFormat(dateString) {\n//   const parts = dateString.split('/');\n//   const [month, day, year] = parts;\n//   const newDateString = `${day}/${month}/${year}`;\n//   return newDateString;\n// }\n\n// function handleCellClick(event) {\n//   const clickedDate = convertDateFormat(event.target.dataset.date);\n//   const currentDateObj = new Date().toLocaleDateString('en-US', {\n//     year: 'numeric',\n//     month: '2-digit',\n//     day: '2-digit',\n//   });\n\n//   const clickedDateObj = new Date(clickedDate);\n//   const currentDateObjObj = new Date(currentDateObj);\n//   const differenceInMilliseconds = clickedDateObj - currentDateObjObj;\n\n//   if (differenceInMilliseconds >= 0) {\n//     const chosenDate = reverseConvertDateFormat(clickedDate);\n//     dateInput.value = `${chosenDate}`;\n//     toggleCalendarVisibility();\n//   }\n// }\n\n// function clearCalendarData() {\n//   calendarBody.innerHTML = '';\n// }\n\n// function updateCalendar(monthOffset) {\n//   currentDateObj.setMonth(currentDateObj.getMonth() + monthOffset);\n//   generateCalendar();\n// }\n\n// prevMonthBtn?.addEventListener('click', () => {\n//   updateCalendar(-1);\n// });\n\n// nextMonthBtn?.addEventListener('click', () => {\n//   updateCalendar(1);\n// });\n\n// calendarIcon.addEventListener('click', e => {\n//   toggleCalendarVisibility();\n//   toggleIconActiveStyle(e.target);\n// });\n\n// function toggleCalendarVisibility() {\n//   const calendarElement = document.querySelector('.calendar');\n//   calendarElement.classList.toggle('isHidden');\n// }\n\n// generateCalendar();\n"],"names":["_arrayLikeToArray","arr","len","allowedPages","updateDynamicLinks","href","_toConsumableArray","document","querySelectorAll","forEach","link","hideSelectedItems","selector","item","classList","add","addWhiteBackground","setCurrentNavLink","currentNavLink","querySelector","modifyContactPage","remove","modifyMainSection","addEventListener","console","log","currentPage","window","location","pathname","includes"],"version":3,"file":"contacts.fa057e59.js.map"}