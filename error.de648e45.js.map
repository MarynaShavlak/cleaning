{"mappings":"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","sources":["src/js/calendar.js"],"sourcesContent":["// const calendarBody = document.getElementById('calendarBody');\n// const monthYear = document.getElementById('monthYear');\n// const prevMonthBtn = document.getElementById('prevMonth');\n// const nextMonthBtn = document.getElementById('nextMonth');\n\n// let currentDate = new Date();\n\n// function generateCalendar() {\n//   const year = currentDate.getFullYear();\n//   const month = currentDate.getMonth();\n//   const today = new Date(); // Get the current date\n//   const firstDayOfMonth = new Date(year, month, 1);\n//   const lastDayOfMonth = new Date(year, month + 1, 0);\n\n//   monthYear.textContent = `${new Intl.DateTimeFormat('en-US', {\n//     month: 'long',\n//   }).format(currentDate)} ${year}`;\n\n//   // Clear previous month's data\n//   calendarBody.innerHTML = '';\n\n//   // Calculate the start day (0 for Sunday, 1 for Monday, etc.)\n//   let startDay = firstDayOfMonth.getDay();\n//   if (startDay === 0) {\n//     startDay = 7; // Make Sunday (0) the last day of the week\n//   }\n\n//   // Calculate the last day of the previous month\n//   const lastDayOfPrevMonth = new Date(year, month, 0).getDate();\n\n//   // Fill in the calendar\n//   let currentDay = 1;\n//   let currentRow = document.createElement('tr');\n\n//   // Fill the first row with days from the previous month\n//   for (let i = startDay - 1; i >= 1; i--) {\n//     const cell = document.createElement('td');\n//     const day = lastDayOfPrevMonth - i + 1;\n//     const formattedDay = day < 10 ? `0${day}` : day;\n//     cell.textContent = formattedDay;\n//     cell.classList.add('previous-month');\n//     cell.dataset.date = `${formattedDay}/${\n//       month < 9 ? '0' : ''\n//     }${month}/${year}`;\n//     currentRow.appendChild(cell);\n//     cell.addEventListener('click', handleCellClick);\n//   }\n\n//   // Fill the remaining cells with days from the current month\n//   while (currentDay <= lastDayOfMonth.getDate()) {\n//     const cell = document.createElement('td');\n//     const formattedDay = currentDay < 10 ? `0${currentDay}` : currentDay;\n//     cell.textContent = formattedDay;\n//     cell.classList.add('current-month');\n//     if (\n//       currentDate.getFullYear() === today.getFullYear() &&\n//       currentDate.getMonth() === today.getMonth() &&\n//       currentDay === today.getDate()\n//     ) {\n//       cell.classList.add('current-day');\n//     }\n//     cell.dataset.date = `${formattedDay}/${month < 9 ? '0' : ''}${\n//       month + 1\n//     }/${year}`;\n//     currentRow.appendChild(cell);\n//     cell.addEventListener('click', handleCellClick);\n//     if (currentRow.children.length === 7) {\n//       calendarBody.appendChild(currentRow);\n//       currentRow = document.createElement('tr');\n//     }\n//     currentDay++;\n//   }\n\n//   // Fill the last row with days from the next month\n//   for (let i = 1; currentRow.children.length < 7; i++) {\n//     const cell = document.createElement('td');\n//     const formattedDay = i < 10 ? `0${i}` : i;\n//     cell.textContent = formattedDay;\n//     cell.classList.add('next-month');\n//     cell.dataset.date = `${formattedDay}/${month < 9 ? '0' : ''}${\n//       month + 2\n//     }/${year}`;\n//     currentRow.appendChild(cell);\n//     cell.addEventListener('click', handleCellClick);\n//   }\n\n//   calendarBody.appendChild(currentRow);\n// }\n\n// function handleCellClick(event) {\n//   const clickedDate = event.target.dataset.date;\n//   console.log(clickedDate);\n// }\n\n// prevMonthBtn.addEventListener('click', () => {\n//   currentDate.setMonth(currentDate.getMonth() - 1);\n//   generateCalendar();\n// });\n\n// nextMonthBtn.addEventListener('click', () => {\n//   currentDate.setMonth(currentDate.getMonth() + 1);\n//   generateCalendar();\n// });\n\n// // Initial calendar generation\n// generateCalendar();\n\nconst calendarBody = document.getElementById('calendarBody');\nconst monthYear = document.getElementById('monthYear');\nconst prevMonthBtn = document.getElementById('prevMonth');\nconst nextMonthBtn = document.getElementById('nextMonth');\n\nlet currentDate = new Date();\n\nfunction generateCalendar() {\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const today = new Date(); // Get the current date\n  const firstDayOfMonth = new Date(year, month, 1);\n  const lastDayOfMonth = new Date(year, month + 1, 0);\n\n  monthYear.textContent = `${new Intl.DateTimeFormat('en-US', {\n    month: 'long',\n  }).format(currentDate)} ${year}`;\n\n  // Clear previous month's data\n  calendarBody.innerHTML = '';\n\n  // Calculate the start day (0 for Sunday, 1 for Monday, etc.)\n  let startDay = firstDayOfMonth.getDay();\n  if (startDay === 0) {\n    startDay = 7; // Make Sunday (0) the last day of the week\n  }\n\n  // Calculate the last day of the previous month\n  const lastDayOfPrevMonth = new Date(year, month, 0).getDate();\n\n  // Fill in the calendar\n  let currentDay = 1;\n  let currentRow = document.createElement('tr');\n\n  // Fill the first row with days from the previous month\n  for (let i = startDay - 1; i >= 1; i--) {\n    const cell = document.createElement('td');\n    const day = lastDayOfPrevMonth - i + 1;\n    const formattedDay = day < 10 ? `0${day}` : day;\n    const formattedMonth = month === 0 ? 12 : month; // Handle January\n    const formattedYear = month === 0 ? year - 1 : year; // Handle January\n    cell.textContent = formattedDay;\n    cell.classList.add('previous-month');\n    cell.dataset.date = `${formattedDay}/${\n      formattedMonth < 10 ? '0' : ''\n    }${formattedMonth}/${formattedYear}`;\n    currentRow.appendChild(cell);\n    cell.addEventListener('click', handleCellClick);\n    if (\n      isDateBeforeToday(new Date(formattedYear, formattedMonth - 1, day), today)\n    ) {\n      cell.classList.add('disabled-day');\n    }\n  }\n\n  // Fill the remaining cells with days from the current month\n  while (currentDay <= lastDayOfMonth.getDate()) {\n    const cell = document.createElement('td');\n    const formattedDay = currentDay < 10 ? `0${currentDay}` : currentDay;\n    cell.textContent = formattedDay;\n    cell.classList.add('current-month');\n    if (\n      currentDate.getFullYear() === today.getFullYear() &&\n      currentDate.getMonth() === today.getMonth() &&\n      currentDay === today.getDate()\n    ) {\n      cell.classList.add('current-day');\n    }\n    cell.dataset.date = `${formattedDay}/${month < 9 ? '0' : ''}${\n      month + 1\n    }/${year}`;\n    currentRow.appendChild(cell);\n    cell.addEventListener('click', handleCellClick);\n    if (isDateBeforeToday(new Date(year, month, currentDay), today)) {\n      cell.classList.add('disabled-day');\n    }\n    if (currentRow.children.length === 7) {\n      calendarBody.appendChild(currentRow);\n      currentRow = document.createElement('tr');\n    }\n    currentDay++;\n  }\n\n  // Fill the last row with days from the next month\n  for (let i = 1; currentRow.children.length < 7; i++) {\n    const cell = document.createElement('td');\n    const formattedDay = i < 10 ? `0${i}` : i;\n    const formattedMonth = month === 11 ? 1 : month + 2; // Handle December\n    const formattedYear = month === 11 ? year + 1 : year; // Handle December\n    cell.textContent = formattedDay;\n    cell.classList.add('next-month');\n    cell.dataset.date = `${formattedDay}/${\n      formattedMonth < 10 ? '0' : ''\n    }${formattedMonth}/${formattedYear}`;\n    currentRow.appendChild(cell);\n    cell.addEventListener('click', handleCellClick);\n    if (\n      isDateBeforeToday(new Date(formattedYear, formattedMonth - 1, i), today)\n    ) {\n      cell.classList.add('disabled-day');\n    }\n  }\n\n  calendarBody.appendChild(currentRow);\n}\n\nfunction isDateBeforeToday(date, today) {\n  return date < today;\n}\n\nfunction convertDateFormat(dateString) {\n  // Split the input date string by '/'\n  const parts = dateString.split('/');\n\n  // Ensure there are three parts (day, month, and year)\n  if (parts.length !== 3) {\n    return 'Invalid date format';\n  }\n\n  const [day, month, year] = parts;\n\n  // Swap day and month and rejoin them with '/'\n  const newDateString = `${month}/${day}/${year}`;\n\n  return newDateString;\n}\n\nfunction handleCellClick(event) {\n  const clickedDate = convertDateFormat(event.target.dataset.date);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  });\n\n  const clickedDateObj = new Date(clickedDate);\n  const currentDateObj = new Date(currentDate);\n  const differenceInMilliseconds = clickedDateObj - currentDateObj;\n\n  if (differenceInMilliseconds >= 0) {\n    console.log('currentDate: ', currentDate);\n    console.log('clickedDate: ', clickedDate);\n  }\n}\n\nprevMonthBtn.addEventListener('click', () => {\n  currentDate.setMonth(currentDate.getMonth() - 1);\n  generateCalendar();\n});\n\nnextMonthBtn.addEventListener('click', () => {\n  currentDate.setMonth(currentDate.getMonth() + 1);\n  generateCalendar();\n});\n\n// Initial calendar generation\ngenerateCalendar();\n"],"names":["$ef92c4b959c54931$var$calendarBody","document","getElementById","$ef92c4b959c54931$var$monthYear","$ef92c4b959c54931$var$prevMonthBtn","$ef92c4b959c54931$var$nextMonthBtn","$ef92c4b959c54931$var$currentDate","Date","$ef92c4b959c54931$var$generateCalendar","year","getFullYear","month","getMonth","today","firstDayOfMonth","lastDayOfMonth","textContent","Intl","DateTimeFormat","format","innerHTML","startDay","getDay","lastDayOfPrevMonth","getDate","currentDay","currentRow","createElement","i","cell","day","formattedDay","formattedMonth","formattedYear","classList","add","dataset","date","appendChild","addEventListener","$ef92c4b959c54931$var$handleCellClick","$ef92c4b959c54931$var$isDateBeforeToday","children","length","i1","event","clickedDate","dateString","parts","split","$ef92c4b959c54931$var$convertDateFormat","target","currentDate1","toLocaleDateString","console","log","setMonth"],"version":3,"file":"error.de648e45.js.map"}